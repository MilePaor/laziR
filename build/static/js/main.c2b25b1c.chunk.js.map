{"version":3,"sources":["images/logo.png","images/cloud.svg","serviceWorker.js","components/Nav/Nav.js","components/News/NewsItem.js","components/News/News.js","components/Weather/WeatherItem.js","components/Weather/WeatherContainer.js","components/Loader/loader.js","index.js"],"names":["module","exports","__webpack_require__","p","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","NavContainer","styled","nav","_templateObject","NavLogo","div","_templateObject2","NavLogoImg","img","_templateObject3","Nav","_ref","handleSourceChange","sourceList","react_default","a","createElement","src","logo","alt","onChange","map","source","key","id","value","name","NewsItemDiv","NewsItem_templateObject","NewsItem","image","title","description","url","className","href","target","rel","style","bottom","WrapperNews","News_templateObject","News","data","article","index","News_NewsItem","urlToImage","WeatherText","span","WeatherItem_templateObject","WeatherImage","WeatherItem_templateObject2","WeatherDay","WeatherItem_templateObject3","WeatherItem","temperature","dayName","concat","Math","floor","WeatherDiv","WeatherContainer_templateObject","Chevron","WeatherContainer_templateObject2","chevronImg","WeatherContainer","weatherWidgetOpen","clickHandler","weatherParams","list","dani","moment","format","add","height","onClick","Weather_WeatherItem","dt","weather","icon","temp","day","Loader","App","apiKeyNews","newsSelectedSource","newsData","newsSources","apiKeyWeather","selectedCity","weatherData","showGrid","e","targetValue","_this","setState","Object","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","t0","t1","getNewsData","t2","sent","t3","call","t4","stop","this","handleWidget","prevState","props","_this2","_callee2","_context2","getSource","getWeatherData","t5","axios","res","sources","articles","components_Nav_Nav","components_News_News","Loader_loader","Weather_WeatherContainer","React","Component","rootElement","document","getElementById","ReactDOM","render","src_App","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c2b25b1c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.1e4930e1.png\";","module.exports = __webpack_public_path__ + \"static/media/cloud.a410f1ea.svg\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport logo from \"../../images/logo.png\";\r\n\r\nconst NavContainer = styled.nav`\r\n  background-color: brown;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  display: flex;\r\n  padding: 0 5%;\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  z-index: 2;\r\n\r\n  width: 100%;\r\n  height: 56px;\r\n  line-height: 56px;\r\n  color: white;\r\n  @media (max-width: 600px) {\r\n    padding: 0 2%;\r\n  }\r\n`;\r\nconst NavLogo = styled.div`\r\n  width: 40px;\r\n  height: 40px;\r\n  display: inline-block;\r\n`;\r\nconst NavLogoImg = styled.img`\r\n  width: 100%;\r\n`;\r\n\r\nconst Nav = ({ handleSourceChange, sourceList }) => {\r\n  return (\r\n    <NavContainer>\r\n      <NavLogo>\r\n        <NavLogoImg src={logo} alt=\"\" />\r\n      </NavLogo>\r\n      {sourceList && (\r\n        <select onChange={handleSourceChange}>\r\n          {sourceList.map(source => {\r\n            return (\r\n              <option key={source.id} value={source.id}>\r\n                {source.name}\r\n              </option>\r\n            );\r\n          })}\r\n        </select>\r\n      )}\r\n    </NavContainer>\r\n  );\r\n};\r\n\r\nexport default Nav;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport \"./news.css\";\r\n\r\nconst NewsItemDiv = styled.div`\r\n  width: 49%;\r\n  @media (max-width: 600px) {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nconst NewsItem = ({ image, title, description, url }) => (\r\n  <NewsItemDiv className=\"card\">\r\n    <div className=\"card-image\">\r\n      {image && <img src={image} alt=\"news\" />}\r\n      <a\r\n        className=\"btn-floating halfway-fab waves-effect waves-light red\"\r\n        href={url}\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n        style={{ bottom: !image && \"-30px\" }}\r\n      >\r\n        <i className=\"material-icons\">arrow_forward</i>\r\n      </a>\r\n    </div>\r\n    <div className=\"card-content\">\r\n      <span className=\"card-title\">{title}</span>\r\n      <p>{description}</p>\r\n    </div>\r\n  </NewsItemDiv>\r\n);\r\n\r\nexport default NewsItem;\r\n","import React from \"react\";\r\nimport NewsItem from \"./NewsItem\";\r\nimport styled from \"styled-components\";\r\n\r\nconst WrapperNews = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n`;\r\n\r\nconst News = ({ data }) => {\r\n  return (\r\n    <WrapperNews>\r\n      {data.map((article, index) => {\r\n        return (\r\n          <NewsItem\r\n            image={article.urlToImage}\r\n            title={article.title}\r\n            description={article.description}\r\n            url={article.url}\r\n            key={index}\r\n          />\r\n        );\r\n      })}\r\n    </WrapperNews>\r\n  );\r\n};\r\n\r\nexport default News;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst WeatherText = styled.span`\r\n  display: inline-block;\r\n`;\r\nconst WeatherImage = styled.img`\r\n  width: 40px;\r\n`;\r\nconst WeatherDay = styled.span`\r\n  display: block;\r\n`;\r\n\r\nconst WeatherItem = ({ image, temperature, dayName }) => {\r\n  return (\r\n    <div>\r\n      <WeatherImage\r\n        src={`http://openweathermap.org/img/w/${image}.png`}\r\n        alt=\"Weather icon\"\r\n      />\r\n      <WeatherText>{Math.floor(temperature)}&#8451;</WeatherText>\r\n      <WeatherDay>{dayName}</WeatherDay>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherItem;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport WeatherItem from \"./WeatherItem\";\r\nimport moment from \"moment\";\r\n\r\nimport chevronImg from \"../../images/cloud.svg\";\r\n\r\nconst WeatherDiv = styled.div`\r\n  height: 0px;\r\n  color: white;\r\n  position: fixed;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  width: 100%;\r\n  background-color: #a52a2a;\r\n  z-index: 3;\r\n  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14),\r\n    0 3px 1px -2px rgba(0, 0, 0, 0.12), 0 1px 5px 0 rgba(0, 0, 0, 0.2);\r\n  display: flex;\r\n  justify-content: space-around;\r\n  transition: all 300ms ease;\r\n`;\r\n\r\nconst Chevron = styled.div`\r\n  background-image: url(${chevronImg});\r\n  background-repeat: no-repeat;\r\n  background-size: 70%;\r\n  background-position: center;\r\n  width: 40px;\r\n  height: 40px;\r\n  position: absolute;\r\n  right: 8px;\r\n  top: -39px;\r\n  z-index: 57;\r\n  background-color: #a52a2a;\r\n  fill: white;\r\n  border-top-left-radius: 5px;\r\n  border-top-right-radius: 5px;\r\n`;\r\n\r\nconst WeatherContainer = ({ data, weatherWidgetOpen, clickHandler }) => {\r\n  let weatherParams = data.list;\r\n\r\n  let dani = [\r\n    moment().format(\"dddd\"),\r\n    moment()\r\n      .add(1, \"days\")\r\n      .format(\"dddd\"),\r\n    moment()\r\n      .add(2, \"days\")\r\n      .format(\"dddd\")\r\n  ];\r\n\r\n  return (\r\n    <WeatherDiv\r\n      style={{ height: weatherWidgetOpen && \"70px\" }}\r\n      onClick={clickHandler}\r\n    >\r\n      {weatherParams.map((value, index) => {\r\n        return (\r\n          <WeatherItem\r\n            key={value.dt}\r\n            image={value.weather[0].icon}\r\n            temperature={value.temp.day}\r\n            dayName={dani[index]}\r\n          />\r\n        );\r\n      })}\r\n      <Chevron />\r\n    </WeatherDiv>\r\n  );\r\n};\r\n\r\nexport default WeatherContainer;\r\n","import React from \"react\";\r\nimport \"./loader.css\";\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div className=\"lds-ellipsis\">\r\n      <div />\r\n      <div />\r\n      <div />\r\n      <div />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport axios from \"axios\";\r\n\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport Nav from \"./components/Nav/Nav\";\r\nimport News from \"./components/News/News\";\r\nimport WeatherContainer from \"./components/Weather/WeatherContainer\";\r\n\r\nimport Loader from \"./components/Loader/loader\";\r\n\r\nimport \"./css/styles.css\";\r\nimport \"./css/materialize.css\";\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    apiKeyNews: \"77aaa40707ae48e6913523b88e3bf60c\",\r\n    newsSelectedSource: \"cnn\",\r\n    newsData: null,\r\n    newsSources: null,\r\n\r\n    apiKeyWeather: \"f5cbece53f9805de76ff787b7dddb949\",\r\n    selectedCity: \"novi beograd\",\r\n    weatherData: null,\r\n\r\n    showGrid: true,\r\n\r\n    weatherWidgetOpen: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (!this.state.newsData) {\r\n      (async () => {\r\n        try {\r\n          this.setState({\r\n            newsData: await this.getNewsData(),\r\n            newsSources: await this.getSource(),\r\n            weatherData: await this.getWeatherData()\r\n          });\r\n        } catch (e) {\r\n          console.log(\"erorcina\", e);\r\n        }\r\n      })();\r\n    }\r\n    // console.log(\"mount\");\r\n  }\r\n\r\n  async getSource() {\r\n    const res = await axios(\"https://newsapi.org/v1/sources\");\r\n    return await res.data.sources;\r\n  }\r\n  // get news data\r\n  async getNewsData(source = this.state.newsSelectedSource) {\r\n    const res = await axios(\r\n      `https://newsapi.org/v2/top-headlines?sources=${source}&apiKey=${\r\n        this.state.apiKeyNews\r\n      }`\r\n    );\r\n    return await res.data.articles;\r\n  }\r\n\r\n  // get weather data\r\n  async getWeatherData(source = this.state.selectedCity) {\r\n    const res = await axios(\r\n      `https://api.openweathermap.org/data/2.5/forecast/daily?q=${source}&units=metric&APPID=${\r\n        this.state.apiKeyWeather\r\n      }&cnt=3`\r\n    );\r\n    return await res.data;\r\n  }\r\n\r\n  // handlers\r\n  handleSourceChange = e => {\r\n    let targetValue = e.target.value;\r\n    this.setState({\r\n      showGrid: false\r\n    });\r\n    (async () => {\r\n      try {\r\n        this.setState({\r\n          newsSelectedSource: targetValue,\r\n          newsData: await this.getNewsData(targetValue),\r\n          showGrid: true\r\n        });\r\n      } catch (e) {\r\n        console.log(\"erorcina\", e);\r\n      }\r\n    })();\r\n  };\r\n  handleWidget = e => {\r\n    this.setState((prevState, props) => {\r\n      return { weatherWidgetOpen: !prevState.weatherWidgetOpen };\r\n    });\r\n  };\r\n  // render\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Nav\r\n          sourceList={this.state.newsSources}\r\n          handleSourceChange={this.handleSourceChange}\r\n        />\r\n        <div className=\"container\">\r\n          {this.state.newsData && this.state.showGrid ? (\r\n            <News data={this.state.newsData} />\r\n          ) : (\r\n            <Loader />\r\n          )}\r\n        </div>\r\n        {this.state.weatherData && (\r\n          <WeatherContainer\r\n            data={this.state.weatherData}\r\n            weatherWidgetOpen={this.state.weatherWidgetOpen}\r\n            clickHandler={this.handleWidget}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\nserviceWorker.register();\r\n"],"sourceRoot":""}